#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <signal.h>
#include <sys/time.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/select.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/wait.h>
#include <netdb.h>
#include <arpa/inet.h>

#define LISTEN_QUEUE 50 /* Max outstanding connection requests; listen() param */

// #define DBADDR "127.0.0.1"
// #define SERVPORT 8021
// #define DBPORT 53021
#define buff_size 4096

int main(int argc, char *argv[])
{
    if (argc != 3)
    {
        fprintf(stderr, "usage: ./http_server [server port] [DB port]\n");
        exit(1);
    }
    int SERVPORT = atoi(argv[1]);
    int DBPORT = atoi(argv[2]);
    int num;
    char buffer[buff_size];
    int sockfd, new_fd, maxone, udpfd;
    struct sockaddr_in my_addr;
    struct sockaddr_in udp_addr;
    struct sockaddr_in their_addr; /* client's address info */
    socklen_t sin_size;
    fd_set rset;
    FD_ZERO(&rset);
    struct timeval tv;
    tv.tv_sec = 5;
    tv.tv_usec = 0;
    // TCP connection
    //| SOCK_NONBLOCK
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
    {
        perror("socket");
        exit(1);
    }

    struct hostent *he;
    he = gethostbyname("localhost");
    my_addr.sin_family = AF_INET;
    my_addr.sin_port = htons(SERVPORT);
    my_addr.sin_addr = *((struct in_addr *)he->h_addr_list[0]);
    bzero(&(my_addr.sin_zero), 8);
    if (bind(sockfd, (struct sockaddr *)&my_addr, sizeof(my_addr)) < 0)
    {
        perror("bind");
        exit(1);
    }
    if (listen(sockfd, LISTEN_QUEUE) < 0)
    {
        perror("listen");
        exit(1);
    }
    // UDP connection
    if ((he = gethostbyname(argv[1])) == NULL)
    {
        herror("gethostbyname");
        exit(1);
    }
    //| SOCK_NONBLOCK

    if ((udpfd = socket(AF_INET, SOCK_DGRAM | SOCK_NONBLOCK, 0)) < 0)
    {
        perror("socket");
        exit(1);
    }
    maxone = (sockfd > udpfd ? sockfd : udpfd) + 1;

    while (1)
    {

        FD_SET(sockfd, &rset);
        FD_SET(udpfd, &rset);

        int temp = select(maxone, &rset, NULL, NULL, &tv);
        if (temp < 0 && errno != EINTR)
        {
            perror("select error");
            exit(1);
        }

        sin_size = sizeof(their_addr);
        if ((new_fd = accept(sockfd, (struct sockaddr *)&their_addr, &sin_size)) < 0)
        {
            perror("accept");
            continue;
        }
        // printf("server: got connection from %s\n", dst);
        num = recv(new_fd, buffer, 4095, 0);
        if (num < 0)
        {
            perror("recv");
            exit(1);
        }
        FILE *file;
        char *get;
        char *typehp;
        char *command;
        char response[4096];
        int fileSize;
        get = strtok(buffer, " ");
        command = strtok(NULL, " ");
        typehp = strtok(NULL, " ");
        char tempbuff[4096];
        char *ip = inet_ntoa(their_addr.sin_addr);
        char link[50] = "Webpage";
        if (get != NULL)
        {
            if (strstr(command, "/") != NULL)
            {
                if (typehp != NULL)
                {
                    if (strstr(buffer, "/../") == NULL || strstr(buffer, "/..") == NULL)
                    {
                        if (strstr(command, "?key=") == NULL)
                        {
                            int tempr = -1;
                            int fileSize = 0;
                            char *temp = "/";
                            if (strcmp(command, temp) == 0)
                            {
                                command = "/index.html";
                            }
                            strcat(link, command);
                            struct stat fileStat;
                            if (stat(link, &fileStat) != 0)
                            {
                                // printf("enter if stat\n");
                                snprintf(response, sizeof(response), "HTTP/1.0 404 Not Found\r\n\r\n<html><body><h1>404 Not Found</h1></body></html>");
                                send(new_fd, response, strlen(response), 0);
                                fprintf(stdout, "%s \"GET %s HTTP/1.1\" 404 Not Found \n", ip, command);
                            }
                            else
                            {
                                // printf("enter else stat\n");
                                snprintf(response, sizeof(response), "HTTP/1.0 200 OK\r\n\r\n");

                                // snprintf(response, sizeof(response), "HTTP/1.0 200 OK\r\nContent-Length: %d\r\n\r\n", 3033);

                                send(new_fd, response, strlen(response), 0);
                                file = fopen(link, "rb");
                                if (file == NULL)
                                {
                                    perror("fopen");
                                    return 0;
                                }
                                while (tempr != 0)
                                {
                                    tempr = fread(tempbuff, sizeof(char), 4096, file);
                                    // printf("fread result %d\n", tempr);
                                    send(new_fd, tempbuff, tempr, 0);
                                }
                                fprintf(stdout, "%s \"GET %s HTTP/1.1\" 200 OK \n", ip, command);
                            }
                        }
                        else
                        {
                            printf("enter database sit%s\n", command);
                            char *keystart;
                            keystart = strstr(command, "?key=");
                            char *keyend;
                            keystart += strlen("?key=");
                            keyend = strchr(keystart, '\0');
                            int keyLength;
                            keyLength = keyend - keystart;
                            if (keyLength)
                            {
                                char key[keyLength + 1];
                                for (int i = 0; i < keyLength; i++)
                                {
                                    key[i] = keystart[i] == '+' ? ' ' : keystart[i];
                                }
                                key[keyLength] = '\0';
                                // strcat(key, ".jpg");
                                printf("key is %s\n", key);
                                char request[4096];
                                // snprintf(request, sizeof(request), "GET %s HTTP/1.1\r\n\r\n\r\n", key);

                                struct sockaddr_in db_server_addr;
                                memset(&db_server_addr, 0, sizeof(db_server_addr));
                                db_server_addr.sin_family = AF_INET;
                                db_server_addr.sin_port = htons(DBPORT);
                                db_server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");

                                sendto(udpfd, key, strlen(key), 0, (struct sockaddr *)&db_server_addr, sizeof(db_server_addr));
                                FD_ZERO(&rset);
                                FD_SET(udpfd, &rset);
                                struct timeval timeout;
                                timeout.tv_sec = 5;
                                timeout.tv_usec = 0;

                                if (select(udpfd + 1, &rset, NULL, NULL, &timeout) > 0)
                                {
                                    char databuf[4096];
                                    int dat;
                                    int headerSent = 0;
                                    while ((dat = recvfrom(udpfd, databuf, sizeof(databuf), 0, NULL, NULL)) > 0)
                                    {
                                        printf("received byte %d\n\n", dat);
                                        if (dat == 14 && strcmp(databuf, "File Not Found") == 0)
                                        {
                                            printf("enter 404 not found\n");
                                            snprintf(response, sizeof(response), "HTTP/1.0 404 Not Found\r\n\r\n<html><body><h1>404 Not Found</h1></body></html>");
                                            send(new_fd, response, strlen(response), 0);
                                            break;
                                        }
                                        else if (dat == 4 && strcmp(databuf, "DONE") == 0)
                                        {
                                            printf("enter DONE\n");
                                            break;
                                        }
                                        else
                                        {
                                            if (!headerSent)
                                            {
                                                snprintf(response, sizeof(response), "HTTP/1.0 200 OK\r\n\r\n");
                                                send(new_fd, response, strlen(response), 0);
                                                headerSent = 1;
                                            }
                                            printf("received byte %d\n\n", dat);
                                            send(new_fd, databuf, dat, 0);
                                        }
                                    }
                                }
                                else
                                {
                                    // timeout
                                    snprintf(response, sizeof(response), "HTTP/1.0 408 Request Timeout\r\n\r\n<html><body><h1>408 Request Timeout</h1></body></html>");
                                    send(new_fd, response, strlen(response), 0);
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        snprintf(response, sizeof(response), "HTTP/1.0 400 Bad Request\r\n\r\n<html><body><h1>400 Bad Request</h1></body></html>");
                        send(new_fd, response, 1000, 0);
                    }
                }
                else
                {
                    snprintf(response, sizeof(response), "HTTP/1.0 501 Not Implemented\r\n\r\n<html><body><h1>501 Not Implemented</h1></body></html>");
                    send(new_fd, response, 1000, 0);
                }
            }
            else
            {
                snprintf(response, sizeof(response), "HTTP/1.0 400 Bad Request\r\n\r\n<html><body><h1>400 Bad Request</h1></body></html>");
                send(new_fd, response, 1000, 0);
            }
        }
        else
        {
            snprintf(response, sizeof(response), "HTTP/1.0 501 Not Implemented\r\n\r\n<html><body><h1>501 Not Implemented</h1></body></html>");
            send(new_fd, response, 1000, 0);
        }
        close(new_fd);
    }
    return 0;
    close(udpfd);
}